{"version":3,"file":"info.js","sourceRoot":"./src/","sources":["commands/info.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Client, CommandInteraction, GuildMember } from 'discord.js';\nimport { Command } from 'src/@types/Util.js';\n\nexport const name: Command['name'] = 'info';\n\nexport const create: Command['create'] = {\n    name: 'info',\n    description: 'Shows informations about a user!',\n    options: [\n        {\n            name: 'user',\n            description: 'The user who you want information about',\n            type: 'USER'\n        }\n    ]\n};\n\nexport const execute: Command['execute'] = async (client: Client, interaction: CommandInteraction): Promise<void> => {\n    // Abort if not the correct channel\n    const allowedChannels: string[] = ['732174841095913472', '818159338186473532'];\n    if (!allowedChannels.includes(interaction.channelID || '')) {\n        return (interaction.editReply('You are not in the correct channel. Please use <#818159338186473532>.') as unknown) as void;\n    }\n\t\t\n    let member: GuildMember;\n    if (interaction.options.length > 0) {\n        member = interaction.options[0].member as GuildMember;\n    } else {\n        member = interaction.member as GuildMember;\n    }\n        \n    const joined = member.joinedAt as any;\n    const created = member.user.createdAt as any;\n\n    const joinedArray = joined.toISOString().replace(/T/, ' ').replace(/\\..+/, '').split(' ');\n    const joinedN = joinedArray[0].split('-');\n    const joinedDay = joinedN[2] == '01' ? '1st' : joinedN[2] == '02' ? '2nd' : joinedN[2] == '03' ? '3rd' : joinedN[2] + 'th';\n    const days = Math.round(((new Date() as any) - joined) / 1000 / 60 / 60 / 24);\n\n    const daysSinceCreated = Math.round(((new Date() as any) - created) / 1000 / 60 / 60 / 24);\n    let createdString = '';\n    if (daysSinceCreated < 365) {\n        createdString = `${daysSinceCreated} days`;\n    } else {\n        const weirdThing = daysSinceCreated / 365 + '';\n        const years = 1 * parseInt(weirdThing.substr(0, weirdThing.indexOf('.')));\n        createdString = `${years} ${years == 1 ? 'year' : 'years'} and ${daysSinceCreated - (years * 365)} days`;\n    }\n\n    let rolesString = '';\n    member.roles.cache.forEach(role => {\n        if (role.name !== '@everyone') {\n            rolesString += `<@&${role.id}> `;\n        }\n    });\n\n    // Create sexy embed!\n    const embedMentioned = {\n        color: 0x00ffff,\n        title: (member.displayName) + ' - ' + getStatus(member.presence.status),\n        thumbnail: {\n            url: member.user.displayAvatarURL(),\n        },\n        fields: [{\n            name: 'Joined: ',\n            value: joinedDay.replace('0', '') + ' of ' + getMonth(joinedN[1]) + ' ' + joinedN[0],\n        },\n        {\n            name: 'Premium',\n            value: member.premiumSince != null ? 'Yep' : 'Nope',\n        },\n        {\n            name: 'Roles',\n            value: rolesString.replace('<&@everyone>', '') == '' ? 'None' : rolesString.replace('<&@everyone>', '`None`'),\n        },\n        {\n            name: 'Avatar',\n            value: `[Click to open](${member.user.displayAvatarURL()})`,\n        },\n        {\n            name: 'Did you know...',\n            value: `...that already ${days} days have passed since the member joined?\\n...that the member used Discord for ${createdString} now?`,\n        },\n        ],\n        footer: {\n            text: 'Time is relative, as always.',\n        },\n    };\n        \n    // Respond\n    return (interaction.editReply({ embeds: [ embedMentioned ] }) as unknown) as void;\n};\n\nconst getMonth = (month: string): string => {\n    switch (month) {\n        case '01':\n            return 'January';\n        case '02':\n            return 'February';\n        case '03':\n            return 'March';\n        case '04':\n            return 'April';\n        case '05':\n            return 'May';\n        case '06':\n            return 'June';\n        case '07':\n            return 'July';\n        case '08':\n            return 'August';\n        case '09':\n            return 'September';\n        case '10':\n            return 'October';\n        case '11':\n            return 'November';\n        case '12':\n            return 'December';\n        default:\n            return 'Magic';\n    }\n};\n\nconst getStatus = (status: string): string => {\n    switch (status) {\n        case 'online':\n            return 'ðŸŸ¢';\n        case 'idle':\n            return 'ðŸŒ™';\n        case 'offline':\n            return 'âš«';\n        case 'dnd':\n            return 'ðŸ”´';\n        default:\n            return 'Status not available';\n    }\n};"]}